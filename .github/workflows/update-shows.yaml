name: Update Show Data
on:
  schedule:
    - cron: "0 8 * * 0"  # 8 AM UTC every Sunday
  workflow_dispatch:  # Manual trigger option
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Update show data
        run: |
          python -c "import main; import asyncio; asyncio.run(main.update_shows())"
      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add shows.db
          git commit -m 'Update show data from MAL [skip ci]' || echo 'No changes to commit'
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Add this async function to main.py
async def update_shows():
    ongoing_data = parse_ongoing_schedule()
    upcoming_data = parse_upcoming_events()
    async with aiosqlite.connect("shows.db") as db:
        await db.execute("DELETE FROM ongoing")
        await db.execute("DELETE FROM upcoming")
        await db.commit()
        for day, shows in ongoing_data.items():
            for show in shows:
                await db.execute(
                    "INSERT INTO ongoing (day, name, current, total, suspended, mal_link) VALUES (?, ?, ?, ?, ?, ?)",
                    (day, show["name"], show["current"], show["total"], int(show["suspended"]), show["mal_link"])
                )
        for show in upcoming_data:
            await db.execute(
                "INSERT INTO upcoming (name, date, theatrical, section, mal_link) VALUES (?, ?, ?, ?, ?)",
                (show["name"], show["date"], int(show["theatrical"]), show["section"], show["mal_link"])
            )
        await db.commit()